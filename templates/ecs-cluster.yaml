Parameters:
  InstanceType:
    Type: String
    Default: t2.micro

  ClusterSize:
    Type: Number
    Default: 1
    
  MaxClusterSize:
    Type: Number
    Default: 2

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  
  KeyName:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id


Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-275ffe31
    us-east-2:
      AMI: ami-c6b5efa3
    us-west-1:
      AMI: ami-1eda8d7e
    us-west-2:
      AMI: ami-a2ca61c2
    eu-west-1:
      AMI: ami-ba346ec9
    eu-west-2:
      AMI: ami-42c5cf26
    eu-central-1:
      AMI: ami-e012d48f
    ap-northeast-1:
      AMI: ami-08f7956f
    ap-southeast-1:
      AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-774b7314
    ca-central-1:
      AMI: ami-be45f7da


Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ecs-${AWS::StackName}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref MaxClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SourceSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref ClusterSize
      TaskDefinition: !Ref TaskDefinition   

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-web-proxy
      ContainerDefinitions:
        - Name: NginxLetsEncrypt
          Image: jrcs/letsencrypt-nginx-proxy-companion
          MountPoints:
            - SourceVolume: docker-sock
              ContainerPath: /var/run/docker.sock
              ReadOnly: true
            - SourceVolume: nginx-certs
              ContainerPath: /etc/nginx/certs
          VolumesFrom: 
            - SourceContainer: NginxProxy
          Essential: true
          Memory: 128
        - Name: NginxProxy
          Image: jwilder/nginx-proxy
          MountPoints:
            - SourceVolume: docker-sock
              ContainerPath: /tmp/docker.sock
              ReadOnly: true
            - SourceVolume: nginx-certs
              ContainerPath: /etc/nginx/certs
              ReadOnly: true
            - SourceVolume: nginx-html
              ContainerPath: /usr/share/nginx/html
            - SourceVolume: nginx-vhosts
              ContainerPath: /etc/nginx/vhost.d
            - SourceVolume: nginx-conf
              ContainerPath: /etc/nginx/conf.d
          Essential: true
          Memory: 128
          PortMappings:
            - HostPort: 443
              ContainerPort: 443
              Protocol: TCP
            - HostPort: 80
              ContainerPort: 80
              Protocol: TCP
      Volumes:
        - Name: docker-sock
          Host:
            SourcePath: /var/run/docker.sock
        - Name: nginx-certs
          Host:
            SourcePath: /opt/docker/nginx/certs
        - Name: nginx-html
          Host:
            SourcePath: /opt/docker/nginx/html
        - Name: nginx-vhosts
          Host:
            SourcePath: /opt/docker/nginx/vhosts
        - Name: nginx-conf
          Host:
            SourcePath: /opt/docker/nginx/confd
        
Outputs:
  ClusterName:
      Value: !Ref Cluster
